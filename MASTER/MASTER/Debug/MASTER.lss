
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8a  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000846  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000675  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054f  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069e  00000000  00000000  00002673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002d11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "UART.h"
#include "SPI.h"
#include "Lcd.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	//Lcd_Init();
	UART_Init();
  76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <UART_Init>
	SPI_Init(MASTER);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Init>
	
	u8 data = 0 ;
  80:	19 82       	std	Y+1, r1	; 0x01

    while (1) 
    {
		
		if(UART_Receive(&data))
  82:	ce 01       	movw	r24, r28
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	0e 94 08 01 	call	0x210	; 0x210 <UART_Receive>
  8a:	88 23       	and	r24, r24
  8c:	d1 f3       	breq	.-12     	; 0x82 <main+0x16>
		{
			
			PORTB |= ~(1 << 4);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	8f 6e       	ori	r24, 0xEF	; 239
  92:	88 bb       	out	0x18, r24	; 24
			SPI_Transmit(data);	
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Transmit>
  9a:	f3 cf       	rjmp	.-26     	; 0x82 <main+0x16>

0000009c <Dio_ConfigChannel>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Dio_ConfigChannel(Dio_PortID portID,Dio_ChannelID channelID,Dio_DirectioType channelDir){
	switch(portID)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	01 f1       	breq	.+64     	; 0xe0 <Dio_ConfigChannel+0x44>
  a0:	30 f0       	brcs	.+12     	; 0xae <Dio_ConfigChannel+0x12>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	b1 f1       	breq	.+108    	; 0x112 <Dio_ConfigChannel+0x76>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <Dio_ConfigChannel+0x10>
  aa:	4c c0       	rjmp	.+152    	; 0x144 <Dio_ConfigChannel+0xa8>
  ac:	08 95       	ret
	{
		case DIO_PORTA:
			if(channelDir == INPUT)
  ae:	41 11       	cpse	r20, r1
  b0:	0c c0       	rjmp	.+24     	; 0xca <Dio_ConfigChannel+0x2e>
			{
				CLEAR_BIT(DIO_PORTA_DDR,channelID);	
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <Dio_ConfigChannel+0x22>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <Dio_ConfigChannel+0x1e>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTA_DDR,channelID);	
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Dio_ConfigChannel+0x3a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Dio_ConfigChannel+0x36>
  da:	82 2b       	or	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	08 95       	ret
			}
		break;
		
		case DIO_PORTB:
			if(channelDir == INPUT)
  e0:	41 11       	cpse	r20, r1
  e2:	0c c0       	rjmp	.+24     	; 0xfc <Dio_ConfigChannel+0x60>
			{
				CLEAR_BIT(DIO_PORTB_DDR,channelID);
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Dio_ConfigChannel+0x54>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <Dio_ConfigChannel+0x50>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTB_DDR,channelID);
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <Dio_ConfigChannel+0x6c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <Dio_ConfigChannel+0x68>
 10c:	82 2b       	or	r24, r18
 10e:	87 bb       	out	0x17, r24	; 23
 110:	08 95       	ret
			}
		break;
		
		case DIO_PORTC:
			if(channelDir == INPUT)
 112:	41 11       	cpse	r20, r1
 114:	0c c0       	rjmp	.+24     	; 0x12e <Dio_ConfigChannel+0x92>
			{
				CLEAR_BIT(DIO_PORTC_DDR,channelID);
 116:	24 b3       	in	r18, 0x14	; 20
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <Dio_ConfigChannel+0x86>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <Dio_ConfigChannel+0x82>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTC_DDR,channelID);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <Dio_ConfigChannel+0x9e>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Dio_ConfigChannel+0x9a>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
			}
		break;
		
		case DIO_PORTD:
			if(channelDir == INPUT)
 144:	41 11       	cpse	r20, r1
 146:	0c c0       	rjmp	.+24     	; 0x160 <Dio_ConfigChannel+0xc4>
			{
				CLEAR_BIT(DIO_PORTD_DDR,channelID);
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Dio_ConfigChannel+0xb8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <Dio_ConfigChannel+0xb4>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTD_DDR,channelID);
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <Dio_ConfigChannel+0xd0>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <Dio_ConfigChannel+0xcc>
 170:	82 2b       	or	r24, r18
 172:	81 bb       	out	0x11, r24	; 17
 174:	08 95       	ret

00000176 <SPI_Init>:
* \Return value:   : None
*******************************************************************************/

 void SPI_Init(SPI_Mode mode)
 {
	switch(mode)
 176:	88 23       	and	r24, r24
 178:	19 f0       	breq	.+6      	; 0x180 <SPI_Init+0xa>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	c9 f0       	breq	.+50     	; 0x1b0 <SPI_Init+0x3a>
 17e:	08 95       	ret
	{
		case MASTER:											// SPI mode is master ( Send data )
		
			Dio_ConfigChannel(SPI_PORT,MOZI,OUTPUT);			// Config MOZI channel as output
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	65 e0       	ldi	r22, 0x05	; 5
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,MIZO,INPUT);				// Config MIZO channel as input
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	66 e0       	ldi	r22, 0x06	; 6
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,SCK,OUTPUT);				// Config SCK channel as output
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,SS,OUTPUT);				// Config SS channel as output
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			SPI_CR |= 0x53;
 1a8:	8d b1       	in	r24, 0x0d	; 13
 1aa:	83 65       	ori	r24, 0x53	; 83
 1ac:	8d b9       	out	0x0d, r24	; 13
			
		break;
 1ae:	08 95       	ret
		
		case SLAVE :											// SPI mode is slave ( Receiving data )
		
			Dio_ConfigChannel(SPI_PORT,MOZI,INPUT);				// Config MOZI channel as input
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	65 e0       	ldi	r22, 0x05	; 5
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,MIZO,OUTPUT);			// Config MIZO channel as output
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	66 e0       	ldi	r22, 0x06	; 6
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,SCK,INPUT);				// Config SCK channel as input
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	67 e0       	ldi	r22, 0x07	; 7
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			Dio_ConfigChannel(SPI_PORT,SS,INPUT);				// Config SS channel as input
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
			SPI_CR |= 0x43;
 1d8:	8d b1       	in	r24, 0x0d	; 13
 1da:	83 64       	ori	r24, 0x43	; 67
 1dc:	8d b9       	out	0x0d, r24	; 13
 1de:	08 95       	ret

000001e0 <SPI_Transmit>:
 * \Return value:   : None
 *******************************************************************************/
 
 void SPI_Transmit(u8 data)
 {
	 SPI_DR = data;												// Writing data which will be send in data register
 1e0:	8f b9       	out	0x0f, r24	; 15
	 while (!(SPI_SR & (1 << 7)));								// Waiting for the SPIF Flag to be set
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <SPI_Transmit+0x2>
 }
 1e6:	08 95       	ret

000001e8 <UART_Init>:

void UART_Transmit(u8 data)
{
	UDR = data;
	while (!(UCSRA & (1 << 6)));
}
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 4e 00 	call	0x9c	; 0x9c <Dio_ConfigChannel>
 1fc:	8a b1       	in	r24, 0x0a	; 10
 1fe:	88 61       	ori	r24, 0x18	; 24
 200:	8a b9       	out	0x0a, r24	; 10
 202:	80 b5       	in	r24, 0x20	; 32
 204:	86 68       	ori	r24, 0x86	; 134
 206:	80 bd       	out	0x20, r24	; 32
 208:	87 e6       	ldi	r24, 0x67	; 103
 20a:	89 b9       	out	0x09, r24	; 9
 20c:	10 bc       	out	0x20, r1	; 32
 20e:	08 95       	ret

00000210 <UART_Receive>:
 * \Return value:   : SPI_Status (SPI_OK)
 *******************************************************************************/

UART_Status UART_Receive (u8* data)
{
	while (!(UCSRA & (1 << 7)));
 210:	5f 9b       	sbis	0x0b, 7	; 11
 212:	fe cf       	rjmp	.-4      	; 0x210 <UART_Receive>
	*data = UDR; 
 214:	2c b1       	in	r18, 0x0c	; 12
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
	return UART_OK;
}
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
