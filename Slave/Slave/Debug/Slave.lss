
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000382  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f51  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066c  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053d  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000076f  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Std_Types.h"
#include "Led.h"
#include "SPI.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	SPI_Init(SLAVE);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 83 01 	call	0x306	; 0x306 <SPI_Init>
	Led_Init();
  7c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Led_Init>
	
	u8 data = 0;
  80:	19 82       	std	Y+1, r1	; 0x01
	
    while (1) 
    {
		if(SPI_Receive(&data))
  82:	ce 01       	movw	r24, r28
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	0e 94 b8 01 	call	0x370	; 0x370 <SPI_Receive>
  8a:	88 23       	and	r24, r24
  8c:	d1 f3       	breq	.-12     	; 0x82 <main+0x16>
		{
			switch(data)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	82 33       	cpi	r24, 0x32	; 50
  92:	69 f0       	breq	.+26     	; 0xae <main+0x42>
  94:	18 f4       	brcc	.+6      	; 0x9c <main+0x30>
  96:	81 33       	cpi	r24, 0x31	; 49
  98:	31 f0       	breq	.+12     	; 0xa6 <main+0x3a>
  9a:	f3 cf       	rjmp	.-26     	; 0x82 <main+0x16>
  9c:	83 33       	cpi	r24, 0x33	; 51
  9e:	59 f0       	breq	.+22     	; 0xb6 <main+0x4a>
  a0:	84 33       	cpi	r24, 0x34	; 52
  a2:	69 f0       	breq	.+26     	; 0xbe <main+0x52>
  a4:	ee cf       	rjmp	.-36     	; 0x82 <main+0x16>
			{
				case '1':
					Led_TurnON(LED0);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 43 01 	call	0x286	; 0x286 <Led_TurnON>
				break;
  ac:	ea cf       	rjmp	.-44     	; 0x82 <main+0x16>
				case '2':
					Led_TurnON(LED1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 43 01 	call	0x286	; 0x286 <Led_TurnON>
				break;
  b4:	e6 cf       	rjmp	.-52     	; 0x82 <main+0x16>
				case '3':
					Led_TurnON(LED2);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	0e 94 43 01 	call	0x286	; 0x286 <Led_TurnON>
				break;
  bc:	e2 cf       	rjmp	.-60     	; 0x82 <main+0x16>
				case '4':
					Led_TurnOFF(LED0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Led_TurnOFF>
					Led_TurnOFF(LED1);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Led_TurnOFF>
					Led_TurnOFF(LED2);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Led_TurnOFF>
				break;
  d0:	d8 cf       	rjmp	.-80     	; 0x82 <main+0x16>

000000d2 <Dio_ConfigChannel>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Dio_ConfigChannel(Dio_PortID portID,Dio_ChannelID channelID,Dio_DirectioType channelDir){
	switch(portID)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	01 f1       	breq	.+64     	; 0x116 <Dio_ConfigChannel+0x44>
  d6:	30 f0       	brcs	.+12     	; 0xe4 <Dio_ConfigChannel+0x12>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	b1 f1       	breq	.+108    	; 0x148 <Dio_ConfigChannel+0x76>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	09 f4       	brne	.+2      	; 0xe2 <Dio_ConfigChannel+0x10>
  e0:	4c c0       	rjmp	.+152    	; 0x17a <Dio_ConfigChannel+0xa8>
  e2:	08 95       	ret
	{
		case DIO_PORTA:
			if(channelDir == INPUT)
  e4:	41 11       	cpse	r20, r1
  e6:	0c c0       	rjmp	.+24     	; 0x100 <Dio_ConfigChannel+0x2e>
			{
				CLEAR_BIT(DIO_PORTA_DDR,channelID);	
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Dio_ConfigChannel+0x22>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Dio_ConfigChannel+0x1e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTA_DDR,channelID);	
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <Dio_ConfigChannel+0x3a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <Dio_ConfigChannel+0x36>
 110:	82 2b       	or	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
			}
		break;
		
		case DIO_PORTB:
			if(channelDir == INPUT)
 116:	41 11       	cpse	r20, r1
 118:	0c c0       	rjmp	.+24     	; 0x132 <Dio_ConfigChannel+0x60>
			{
				CLEAR_BIT(DIO_PORTB_DDR,channelID);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <Dio_ConfigChannel+0x54>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <Dio_ConfigChannel+0x50>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTB_DDR,channelID);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_ConfigChannel+0x6c>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_ConfigChannel+0x68>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
 146:	08 95       	ret
			}
		break;
		
		case DIO_PORTC:
			if(channelDir == INPUT)
 148:	41 11       	cpse	r20, r1
 14a:	0c c0       	rjmp	.+24     	; 0x164 <Dio_ConfigChannel+0x92>
			{
				CLEAR_BIT(DIO_PORTC_DDR,channelID);
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <Dio_ConfigChannel+0x86>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <Dio_ConfigChannel+0x82>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
 162:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTC_DDR,channelID);
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_ConfigChannel+0x9e>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_ConfigChannel+0x9a>
 174:	82 2b       	or	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
 178:	08 95       	ret
			}
		break;
		
		case DIO_PORTD:
			if(channelDir == INPUT)
 17a:	41 11       	cpse	r20, r1
 17c:	0c c0       	rjmp	.+24     	; 0x196 <Dio_ConfigChannel+0xc4>
			{
				CLEAR_BIT(DIO_PORTD_DDR,channelID);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <Dio_ConfigChannel+0xb8>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Dio_ConfigChannel+0xb4>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret
			}
			else
			{
				SET_BIT(DIO_PORTD_DDR,channelID);
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <Dio_ConfigChannel+0xd0>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <Dio_ConfigChannel+0xcc>
 1a6:	82 2b       	or	r24, r18
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	08 95       	ret

000001ac <Dio_WriteChannel>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Dio_WriteChannel(Dio_PortID portID,Dio_ChannelID channelID,Dio_LevelType level){
	switch(portID)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	01 f1       	breq	.+64     	; 0x1f0 <Dio_WriteChannel+0x44>
 1b0:	30 f0       	brcs	.+12     	; 0x1be <Dio_WriteChannel+0x12>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	b1 f1       	breq	.+108    	; 0x222 <Dio_WriteChannel+0x76>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <Dio_WriteChannel+0x10>
 1ba:	4c c0       	rjmp	.+152    	; 0x254 <Dio_WriteChannel+0xa8>
 1bc:	08 95       	ret
	{
		case DIO_PORTA:
			if(level == STD_HIGH)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <Dio_WriteChannel+0x2c>
			{
				SET_BIT(DIO_PORTA_DATA_OUT,channelID);
 1c2:	2b b3       	in	r18, 0x1b	; 27
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_WriteChannel+0x22>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_WriteChannel+0x1e>
 1d2:	82 2b       	or	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DIO_PORTA_DATA_OUT,channelID);
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Dio_WriteChannel+0x38>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Dio_WriteChannel+0x34>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret
			}
		break;
		
		case DIO_PORTB:
			if(level == STD_HIGH)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <Dio_WriteChannel+0x5e>
			{
				SET_BIT(DIO_PORTB_DATA_OUT,channelID);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Dio_WriteChannel+0x54>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Dio_WriteChannel+0x50>
 204:	82 2b       	or	r24, r18
 206:	88 bb       	out	0x18, r24	; 24
 208:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DIO_PORTB_DATA_OUT,channelID);
 20a:	28 b3       	in	r18, 0x18	; 24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <Dio_WriteChannel+0x6a>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <Dio_WriteChannel+0x66>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret
			}
		break;
		
		case DIO_PORTC:
			if(level == STD_HIGH)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <Dio_WriteChannel+0x90>
			{
				SET_BIT(DIO_PORTC_DATA_OUT,channelID);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <Dio_WriteChannel+0x86>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <Dio_WriteChannel+0x82>
 236:	82 2b       	or	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DIO_PORTC_DATA_OUT,channelID);
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <Dio_WriteChannel+0x9c>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <Dio_WriteChannel+0x98>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	85 bb       	out	0x15, r24	; 21
 252:	08 95       	ret
			}
		break;
		
		case DIO_PORTD:
			if(level == STD_HIGH)
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	59 f4       	brne	.+22     	; 0x26e <Dio_WriteChannel+0xc2>
			{
				SET_BIT(DIO_PORTD_DATA_OUT,channelID);
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Dio_WriteChannel+0xb8>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <Dio_WriteChannel+0xb4>
 268:	82 2b       	or	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DIO_PORTD_DATA_OUT,channelID);
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <Dio_WriteChannel+0xce>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <Dio_WriteChannel+0xca>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	82 bb       	out	0x12, r24	; 18
 284:	08 95       	ret

00000286 <Led_TurnON>:
		case LED1:
			Dio_FlipOutputChannel(LED1_PORT,LED1_CHANNEL);
		break;
		
		case LED2:
			Dio_FlipOutputChannel(LED2_PORT,LED2_CHANNEL);
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	51 f0       	breq	.+20     	; 0x29e <Led_TurnON+0x18>
 28a:	18 f0       	brcs	.+6      	; 0x292 <Led_TurnON+0xc>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	69 f0       	breq	.+26     	; 0x2aa <Led_TurnON+0x24>
 290:	08 95       	ret
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 29c:	08 95       	ret
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 2a8:	08 95       	ret
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 2b4:	08 95       	ret

000002b6 <Led_TurnOFF>:
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	51 f0       	breq	.+20     	; 0x2ce <Led_TurnOFF+0x18>
 2ba:	18 f0       	brcs	.+6      	; 0x2c2 <Led_TurnOFF+0xc>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	69 f0       	breq	.+26     	; 0x2da <Led_TurnOFF+0x24>
 2c0:	08 95       	ret
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 2cc:	08 95       	ret
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	67 e0       	ldi	r22, 0x07	; 7
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 2d8:	08 95       	ret
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_WriteChannel>
 2e4:	08 95       	ret

000002e6 <Led_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/

void Led_Init(void){
	Dio_ConfigChannel(LED0_PORT,LED0_CHANNEL,OUTPUT);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_CHANNEL,OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	67 e0       	ldi	r22, 0x07	; 7
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_CHANNEL,OUTPUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 304:	08 95       	ret

00000306 <SPI_Init>:
 
 void SPI_Transmit(u8 data)
 {
	 SPI_DR = data;												// Writing data which will be send in data register
	 while (!(SPI_SR & (1 << 7)));								// Waiting for the SPIF Flag to be set
 }
 306:	88 23       	and	r24, r24
 308:	19 f0       	breq	.+6      	; 0x310 <SPI_Init+0xa>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	c9 f0       	breq	.+50     	; 0x340 <SPI_Init+0x3a>
 30e:	08 95       	ret
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	67 e0       	ldi	r22, 0x07	; 7
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 338:	8d b1       	in	r24, 0x0d	; 13
 33a:	83 65       	ori	r24, 0x53	; 83
 33c:	8d b9       	out	0x0d, r24	; 13
 33e:	08 95       	ret
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 69 00 	call	0xd2	; 0xd2 <Dio_ConfigChannel>
 368:	8d b1       	in	r24, 0x0d	; 13
 36a:	83 64       	ori	r24, 0x43	; 67
 36c:	8d b9       	out	0x0d, r24	; 13
 36e:	08 95       	ret

00000370 <SPI_Receive>:
 *******************************************************************************/
 
 
 SPI_Status SPI_Receive(u8* data)
 {
	 while (!(SPI_SR & (1 << 7)));								// Writing data which will be send in data register
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <SPI_Receive>
	 *data = SPI_DR;											// Waiting for the SPIF Flag to be set
 374:	2f b1       	in	r18, 0x0f	; 15
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
	 return SPI_OK;												// Return SPI_OK (1)
 }
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
